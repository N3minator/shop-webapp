import logging
import json
import sqlite3
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes

# –ü—É—Ç—å –∫ –≤–∞—à–µ–π chat_config.db
DB_PATH = 'database/data_main/chat_config.db'

# –∑–∞–≤–µ–¥—ë–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = json.loads(update.message.web_app_data.data)
    # <-- –ª–æ–≥–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –≤—Å—ë –ø—Ä–∏—à–µ–¥—à–µ–µ
    logger.info("üöÄ WebApp data received: %s", data)

    subscription = data.get("subscription")
    duration = int(data.get("duration", 0))
    group_id = data.get("group_id")
    test_mode = data.get("test", False)

    if not subscription or not duration or not group_id:
        logger.warning("‚ö†Ô∏è Incomplete WebApp data: %s", data)
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞.")
        return

    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º ‚Äî —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î –∏ –æ—Ç–≤–µ—á–∞–µ–º
    if test_mode:
        # –≤—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        until = datetime.utcnow() + timedelta(days=30 * duration)
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        # –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        mapping = {
            'moder': ('mode_pro_moder', 'pro_moder_until'),
            'game':  ('mode_pro_game',  'pro_game_until'),
            'full':  ('mode_pro_full',  'pro_full_until'),
        }
        flag_col, until_col = mapping[subscription]
        # –æ–±–Ω–æ–≤–ª—è–µ–º
        cur.execute(f"""
          UPDATE chat_config
             SET {flag_col} = 1,
                 {until_col} = ?
           WHERE chat_id = ?
        """, (until.isoformat(), group_id))
        conn.commit()
        conn.close()

        # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"‚úÖ [TEST] –ü–æ–¥–ø–∏—Å–∫–∞ ¬´{subscription.upper()}¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {duration} –º–µ—Å. "
            f"(–¥–æ {until.date()}) –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}."
        )
        return

    # ...–∑–¥–µ—Å—å –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –Ω–∞—Å—Ç–æ—è—â–∞—è send_invoice(), –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç
    await update.message.reply_text("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.")

